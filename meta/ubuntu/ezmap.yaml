mmdebstrap:
  mode: unshare
  suite: noble
  target: rootfs
  mirrors:
    - http://ports.ubuntu.com/ubuntu-ports noble main restricted universe multiverse
    - http://ports.ubuntu.com/ubuntu-ports noble-updates main restricted universe multiverse
    - http://ports.ubuntu.com/ubuntu-ports noble-security main restricted universe multiverse
  keyrings:
    - /usr/share/keyrings/ubuntu-archive-keyring.gpg
  architecture: arm64
  variant: buildd

  setup-hooks:
    - rm -f "$1/etc/apt/sources.list.d/ros2-testing.list"
    - mkdir -p "$1/usr/share/keyrings"
    - curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o "$1/usr/share/keyrings/ros-archive-keyring.gpg"
    - chmod 644 "$1/usr/share/keyrings/ros-archive-keyring.gpg"
    - echo "deb [arch=arm64 signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu noble main" > "$1/etc/apt/sources.list.d/ros2.list"

  packages:
    - apt
    - apt-utils
    - dpkg
    - bash
    - curl
    - gnupg
    - git
    - lsb-release
    - software-properties-common
    - python3-colcon-common-extensions
    - ros-jazzy-ros-base
    - ros-jazzy-ament-cmake
    - ros-jazzy-rviz-visual-tools
    - ros-jazzy-vision-msgs              # Add this
    - ros-jazzy-image-transport
    - ros-jazzy-camera-info-manager
    - ros-dev-tools
    - python3-vcstool
    - gh
    - nodejs
    - npm

  customize-hooks:
    # Update apt repositories and enable universe
    - chroot "$1" apt-get update
    - chroot "$1" add-apt-repository -y universe
    - chroot "$1" apt-get update

    # Install additional ROS packages
    - chroot "$1" apt-get install -y ros-jazzy-nav2-map-server ros-jazzy-gps-umd libpcl-dev ros-jazzy-pcl-conversions libpcap-dev ros-jazzy-rosbridge-server ros-jazzy-tf-transformations ros-jazzy-nav2-msgs ros-jazzy-nav2-util libudev-dev

    # Create ubuntu user
    - chroot "$1" useradd --create-home --shell /bin/bash ubuntu || true
    - chroot "$1" passwd -d ubuntu

    # rosdep setup
    - chroot "$1" rosdep init || true
    - chroot "$1" runuser -u ubuntu -- rosdep update --include-eol-distros

    # Create CORRECTLY formatted dummy camera calibration files
    - |
      mkdir -p "$1/home/ubuntu/.ros/camera_info"
      cat > "$1/home/ubuntu/.ros/camera_info/imx219__base_axi_pcie_1000120000_rp1_i2c_88000_imx219_10_640x480.yaml" << 'EOF'
      image_width: 640
      image_height: 480
      camera_name: imx219__base_axi_pcie_1000120000_rp1_i2c_88000_imx219_10_640x480
      camera_matrix:
        rows: 3
        cols: 3
         [500.0, 0.0, 320.0,
               0.0, 500.0, 240.0,
               0.0, 0.0, 1.0]
      distortion_model: plumb_bob
      distortion_coefficients:
        rows: 1
        cols: 5
         [0.0, 0.0, 0.0, 0.0, 0.0]
      rectification_matrix:
        rows: 3
        cols: 3
         [1.0, 0.0, 0.0,
               0.0, 1.0, 0.0,
               0.0, 0.0, 1.0]
      projection_matrix:
        rows: 3
        cols: 4
         [500.0, 0.0, 320.0, 0.0,
               0.0, 500.0, 240.0, 0.0,
               0.0, 0.0, 1.0, 0.0]
      EOF

      cat > "$1/home/ubuntu/.ros/camera_info/imx708_wide__base_axi_pcie_1000120000_rp1_i2c_88000_imx708_1a_640x480.yaml" << 'EOF'
      image_width: 640
      image_height: 480
      camera_name: imx708_wide__base_axi_pcie_1000120000_rp1_i2c_88000_imx708_1a_640x480
      camera_matrix:
        rows: 3
        cols: 3
         [500.0, 0.0, 320.0,
               0.0, 500.0, 240.0,
               0.0, 0.0, 1.0]
      distortion_model: plumb_bob
      distortion_coefficients:
        rows: 1
        cols: 5
         [0.0, 0.0, 0.0, 0.0, 0.0]
      rectification_matrix:
        rows: 3
        cols: 3
         [1.0, 0.0, 0.0,
               0.0, 1.0, 0.0,
               0.0, 0.0, 1.0]
      projection_matrix:
        rows: 3
        cols: 4
         [500.0, 0.0, 320.0, 0.0,
               0.0, 500.0, 240.0, 0.0,
               0.0, 0.0, 1.0, 0.0]
      EOF

    # Clone and build ezmap_pro with proper error handling
    - |
      if [ -z "${GITHUB_TOKEN:-}" ]; then
        echo "ERROR: GITHUB_TOKEN not set"
        exit 1
      fi

      chroot "$1" bash -c "
        export GITHUB_TOKEN='${GITHUB_TOKEN}'
        source /opt/ros/jazzy/setup.bash
        cd /home/ubuntu
        mkdir -p ezmap_ws/src
        cd ezmap_ws/src
        git clone https://${GITHUB_TOKEN}@github.com/UbiquityRobotics/ezmap_pro.git -b jazzy-gen5-and-6
        cd ezmap_pro
        sed -i 's|https://github.com/|https://${GITHUB_TOKEN}@github.com/|g' ezmap_pro.repos
        vcs import < ezmap_pro.repos

        # Skip problematic packages
        touch ../aruco_detect/COLCON_IGNORE || true
        touch ../ld19_lidar/COLCON_IGNORE || true

        # Build route_select_ui touchscreen web app
        cd route_select_ui/web_app
        npm install --silent
        npm run build

        # Back to workspace and build ROS
        cd /home/ubuntu/ezmap_ws
        source /opt/ros/jazzy/setup.bash
        export CMAKE_PREFIX_PATH=/opt/ros/jazzy:\$CMAKE_PREFIX_PATH
        # Install dependencies first
        rosdep install --from-paths src --ignore-src -r -y || true
        ./src/ezmap_pro/build.sh
      "

    # Network configuration for lidar
    - |
      # Create systemd network configuration
      mkdir -p "$1/etc/systemd/network"
      cat > "$1/etc/systemd/network/10-eth-dhcp.network" << 'EOF'
      [Match]
      Name=end0

      [Link]
      RequiredForOnline=no

      [Network]
      ConfigureWithoutCarrier=true
      Address=192.168.42.125/24
      EOF

      # Create netplan configuration
      mkdir -p "$1/etc/netplan"
      cat > "$1/etc/netplan/01-netcfg.yaml" << 'EOF'
      network:
        version: 2
        renderer: networkd
        ethernets:
          end0:
            dhcp4: no
            addresses: [192.168.42.125/24]
            gateway4: 0.0.0.0
            nameservers:
              addresses: [8.8.8.8]
      EOF

    # Setup udev rules for robot serial
    - |
      mkdir -p "$1/etc/udev/rules.d"
      cat > "$1/etc/udev/rules.d/99-robot-serial.rules" << 'EOF'
      SUBSYSTEM=="tty", KERNEL=="ttyAMA0", SYMLINK+="robot_serial"
      SUBSYSTEM=="tty", KERNEL=="ttyS0", SYMLINK+="robot_serial"
      EOF

    # Create robot configuration
    - |
      mkdir -p "$1/etc/ubiquity"
      cat > "$1/etc/ubiquity/robot.yaml" << 'EOF'
      force_time_sync: true
      generation: gen6
      gps_installed: none
      gps_position: top_plate
      lidar_installed: cx
      lidar_position: top_plate_center_custom
      oled_display:
        controller: SH1106
      raspicam_markertype: marker_stag_18
      raspicam_position: upward
      shell_installed: false
      sonars_installed: false
      tower_installed: false
      EOF

    # Reload udev rules (this will take effect on first boot)
    - chroot "$1" bash -c "udevadm control --reload-rules 2>/dev/null || true"
    # Create ezmap startup script
    - |
      cat > "$1/home/ubuntu/ezmap_ws/start_ezmap.sh" << 'EOF'
      #!/bin/bash
      set -e

      cd /home/ubuntu/ros2_ws

      # Build camera_ros workspace if not already built
      if [ ! -f install/setup.bash ]; then
        echo "[ezmap.service] Building camera_ros in ros2_ws..."
        colcon build --base-paths src/camera_ros
      fi

      # Source environments
      source /opt/ros/jazzy/setup.bash
      source /home/ubuntu/ros2_ws/install/setup.bash
      cd /home/ubuntu/ezmap_ws
      source install/setup.bash

      # Launch ezmap bringup
      ros2 launch ezmap_bringup base.launch.py
      EOF

    # Make startup script executable
    - chroot "$1" chmod +x /home/ubuntu/ezmap_ws/start_ezmap.sh
    # Create a service for ezmap startup
    - |
      cat > "$1/etc/systemd/system/ezmap.service" << 'EOF'
      [Unit]
      Description=ROS2 ezmap bringup
      After=network.target

      [Service]
      Type=simple
      User=ubuntu
      WorkingDirectory=/home/ubuntu/ezmap_ws
      Environment=ROS_DOMAIN_ID=0
      ExecStart=/home/ubuntu/ezmap_ws/start_ezmap.sh
      Restart=on-failure
      RestartSec=5

      [Install]
      WantedBy=multi-user.target
      EOF

    # Enable the service
    - chroot "$1" systemctl enable ezmap.service

    # Add ROS setup to ubuntu user's bashrc
    - echo "source ~/ezmap_ws/install/setup.bash" >> "$1/home/ubuntu/.bashrc"

    # Ensure permissions for service/camera files
    - chroot "$1" chown -R ubuntu:ubuntu /home/ubuntu/.ros /home/ubuntu/ezmap_ws

